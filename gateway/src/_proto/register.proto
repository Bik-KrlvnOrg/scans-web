syntax = "proto2";

package io.scans.srv.register;

//region REGISTER

// Generated according to https://cloud.google.com/apis/design/standard_methods
service RegisterService {
  rpc ListRegisters(ListRegistersRequest) returns (ListRegistersResponse);

  rpc GetRegister(GetRegisterRequest) returns (Register);

  rpc CreateRegister(CreateRegisterRequest) returns (RegisterSuccessResponse);

  rpc UpdateRegister(UpdateRegisterRequest) returns (RegisterSuccessResponse);

  rpc DeleteRegister(DeleteRegisterRequest) returns (RegisterSuccessResponse);
}

message Register {
    required string type = 1;
    required Group group = 2;
    required Sponsor sponsor = 3;
}

message RegisterSuccessResponse { required bool success = 1;}

message Member {
   optional string id = 1;
   required string firstname = 2;
   required string lastname = 3;
   required string dob = 4;
   required string gender = 5;
   required string contact = 6;
   required string email = 7;
   required string relationship = 8;
   required string residentialAddress = 9;
   optional string rateId = 10;
   optional string premiumId = 11;
   repeated Medical medicals = 12;
}

message MemberGroup {
   optional string id = 1;
   required string principalId = 2;
   required string premiumId = 3;
   optional Group group = 4;
   repeated Member members = 5;
}

message Sponsor {
   optional string id = 1;
   required string name = 2;
   required string relationship = 3;
   required string contact = 4;
   required string email = 5;
   optional string password = 6;
   required string residentialAddress = 7;
   required string postalAddress = 8;
   repeated Member members = 9;
}

message Benefit {
   required string benefitId = 1;
   optional string title = 2;
}

message MedicalHistory { repeated Medical medicals = 1;}

message ListRegistersRequest {}

message ListRegistersResponse {  repeated Register registers = 1;}

message GetRegisterRequest { required string id = 1;}

message CreateRegisterRequest { required Register register = 1;}

message UpdateRegisterRequest { required Register register = 1;}

message DeleteRegisterRequest { required string id = 1;}

//endregion


//region MEDICAL

service MedicalService {
  rpc ListMedicals(ListMedicalsRequest) returns (ListMedicalsResponse);

  rpc GetMedical(GetMedicalRequest) returns (Medical);

  rpc CreateMedical(CreateMedicalRequest) returns (MedicalSuccessResponse);

  rpc UpdateMedical(UpdateMedicalRequest) returns (MedicalSuccessResponse);

  rpc DeleteMedical(DeleteMedicalRequest) returns (MedicalSuccessResponse);
}

message Medical {
    optional string id = 1;
    required string name = 2;
    required double value = 3;
}

message MedicalSuccessResponse { required bool success = 1;}

message ListMedicalsRequest {}

message ListMedicalsResponse { repeated Medical medicals = 1;}

message GetMedicalRequest { required string id = 1;}

message CreateMedicalRequest {repeated Medical medicals = 1;}

message UpdateMedicalRequest { required Medical medical = 1;}

message DeleteMedicalRequest { required string id = 1;}

//endregion

// region GROUP
service GroupService {
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);

  rpc GetGroup(GetGroupRequest) returns (Group);

  rpc CreateGroup(CreateGroupRequest) returns (GroupSuccessResponse);

  rpc UpdateGroup(UpdateGroupRequest) returns (GroupSuccessResponse);

  rpc DeleteGroup(DeleteGroupRequest) returns (GroupSuccessResponse);
}

message Group {
   optional string id = 1;
   required string name = 2;
   optional string description = 3;
}

message GroupSuccessResponse { required bool success = 1;}

message ListGroupsRequest {}

message ListGroupsResponse { repeated Group groups = 1;}

message GetGroupRequest { required string id = 1;}

message CreateGroupRequest { required Group group = 1;}

message UpdateGroupRequest {required  Group group = 1;}

message DeleteGroupRequest { required string id = 1;}

//end region